#!/usr/bin/env python3
import argparse
import configparser
import io
import json
import os.path
import plistlib
import re
import subprocess
import tempfile
import textwrap
import urllib.parse
import urllib.request
from typing import List
from typing import NamedTuple
from typing import Optional
from typing import Set
from typing import Tuple

import cson  # pip install cson

HEADER_RE = re.compile('^#+ ', re.MULTILINE)
TRAILING_WS_RE = re.compile(r'\s+$', re.MULTILINE)

_STRATEGIES = (json.loads, cson.loads, plistlib.loads)
_GRAMMAR_DIR = 'share/babi/grammar_v1'
_LICENSE_DIR = 'licenses'


class Repo(NamedTuple):
    name: str
    version: str
    license_path: str
    grammars: Tuple[str, ...]
    todo: Optional[str] = None

    @property
    def license_filename(self) -> str:
        return f'LICENSE_{self.name.replace("/", "_")}'

    def url(self, path: str) -> str:
        path = urllib.parse.quote(path)
        return f'https://raw.github.com/{self.name}/{self.version}/{path}'

    def __repr__(self) -> str:
        max_width = 80 - len('        grammars=') - len(',')
        if len(repr(self.grammars)) > max_width:
            grammars_repr = (
                '(\n' +
                ''.join(f'        {g!r},\n' for g in self.grammars) +
                '    )'
            )
        else:
            grammars_repr = repr(self.grammars)

        if self.todo:
            todo_repr = f'    todo={self.todo!r},\n'
        else:
            todo_repr = ''

        return (
            f'{type(self).__name__}(\n'
            f'    name={self.name!r},\n'
            f'    version={self.version!r},\n'
            f'    license_path={self.license_path!r},\n'
            f'    grammars={grammars_repr},\n'
            f'{todo_repr}'
            f')'
        )


# BEGIN
REPOS = (
    Repo(
        name='MagicStack/MagicPython',
        version='c9b3409d',
        license_path='LICENSE',
        grammars=(
            'grammars/MagicPython.tmLanguage',
            'grammars/MagicRegExp.tmLanguage',
        ),
    ),
    Repo(
        name='PowerShell/EditorSyntax',
        version='4a0a0766',
        license_path='LICENSE',
        grammars=('PowerShellSyntax.tmLanguage',),
    ),
    Repo(
        name='asottile/atom-language-rust',
        version='e113ca67',
        license_path='LICENSE.md',
        grammars=('grammars/rust.cson',),
        todo='https://github.com/zargony/atom-language-rust/pull/149',
    ),
    Repo(
        name='asottile/language-xml',
        version='2d76bc1f',
        license_path='LICENSE.md',
        grammars=('grammars/xml.cson', 'grammars/xsl.cson'),
        todo='https://github.com/atom/language-xml/pull/99',
    ),
    Repo(
        name='atom/language-css',
        version='9feb69c0',
        license_path='LICENSE.md',
        grammars=('grammars/css.cson',),
    ),
    Repo(
        name='atom/language-shellscript',
        version='7008ea92',
        license_path='LICENSE.md',
        grammars=(
            'grammars/shell-unix-bash.cson',
            'grammars/shell-session.cson',
        ),
    ),
    Repo(
        name='fadeevab/make.tmbundle',
        version='fd57c0552',
        license_path='LICENSE.md',
        grammars=('Syntaxes/Makefile.plist',),
    ),
    Repo(
        name='jeff-hykin/cpp-textmate-grammar',
        version='579ebc2',
        license_path='LICENSE',
        grammars=(
            'syntaxes/c.tmLanguage.json',
            'syntaxes/cpp.embedded.macro.tmLanguage.json',
            'syntaxes/cpp.tmLanguage.json',
            'syntaxes/objc.tmLanguage.json',
            'syntaxes/objcpp.tmLanguage.json',
        ),
    ),
    Repo(
        name='lingua-pupuli/puppet-editor-syntax',
        version='498bb86',
        license_path='LICENSE',
        grammars=('syntaxes/puppet.tmLanguage',),
    ),
    Repo(
        name='microsoft/vscode-JSON.tmLanguage',
        version='d113e909',
        license_path='LICENSE',
        grammars=('JSON.tmLanguage',),
    ),
    Repo(
        name='microsoft/vscode-markdown-tm-grammar',
        version='59a5962',
        license_path='LICENSE.txt',
        grammars=('syntaxes/markdown.tmLanguage',),
    ),
    Repo(
        name='moby/moby',
        version='c7ad2b866',
        license_path='LICENSE',
        grammars=(
            'contrib/syntax/textmate/Docker.tmbundle/Syntaxes/Dockerfile.tmLanguage',  # noqa: E501
        ),
    ),
    Repo(
        name='textmate/diff.tmbundle',
        version='0593bb77',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Diff.plist',),
    ),
    Repo(
        name='textmate/html.tmbundle',
        version='0c3d5ee5',
        license_path='README.mdown#License',
        grammars=(
            'Syntaxes/HTML (Derivative).tmLanguage',
            'Syntaxes/HTML.plist',
        ),
    ),
    Repo(
        name='textmate/ini.tmbundle',
        version='7d8c7b55',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Ini.plist',),
    ),
    Repo(
        name='textmate/yaml.tmbundle',
        version='e54ceae3',
        license_path='README.mdown#License',
        grammars=('Syntaxes/YAML.tmLanguage',),
    ),
)
# END


def _cfg_str(filenames: List[str]) -> str:
    return '\n' + '\n'.join(filenames)


def _download() -> int:
    assert os.path.exists(_GRAMMAR_DIR)
    assert os.path.exists(_LICENSE_DIR)

    licenses: Set[str] = set()
    grammars: Set[str] = set()

    for repo in REPOS:
        print(f'{repo.name}...')

        licenses.add(repo.license_filename)

        license_path, _, header = repo.license_path.partition('#')
        license_url = repo.url(license_path)
        license_s = urllib.request.urlopen(license_url).read().decode()

        if header:
            sections = HEADER_RE.split(license_s)
            for section in sections:
                if section.startswith(header):
                    _, _, license_s = section.partition('\n')
                    break
            else:
                raise AssertionError(f'not found {repo.license_path}')

        # some licenses have trailing whitespace, ugh
        license_s = TRAILING_WS_RE.sub('', license_s)

        with open(os.path.join(_LICENSE_DIR, repo.license_filename), 'w') as f:
            f.write(f'LICENSE retrieved from {license_url}\n\n')
            f.write(f'{"-" * 79}\n\n')
            f.write(f'{license_s.rstrip()}\n')

        for grammar in repo.grammars:
            grammar_s = urllib.request.urlopen(repo.url(grammar)).read()
            for strategy in _STRATEGIES:
                try:
                    loaded = strategy(grammar_s)
                except Exception:
                    continue
                else:
                    break
            else:
                raise AssertionError(f'could not parse {grammar}')

            grammar_name = f'{loaded["scopeName"]}.json'
            grammars.add(grammar_name)
            with open(os.path.join(_GRAMMAR_DIR, grammar_name), 'w') as f:
                json.dump(loaded, f)
                f.write('\n')

    existing_licenses = set(os.listdir(_LICENSE_DIR))
    for victim in existing_licenses - licenses:
        os.remove(os.path.join(_LICENSE_DIR, victim))
    existing_grammars = set(os.listdir(_GRAMMAR_DIR))
    for victim in existing_grammars - grammars:
        os.remove(os.path.join(_GRAMMAR_DIR, victim))

    cfg = configparser.ConfigParser()
    cfg.read('setup.cfg')

    license_files = sorted(os.path.join(_LICENSE_DIR, f) for f in licenses)
    cfg['metadata']['license_files'] = _cfg_str(license_files)
    grammar_files = sorted(os.path.join(_GRAMMAR_DIR, f) for f in grammars)
    cfg['options.data_files'][_GRAMMAR_DIR] = _cfg_str(grammar_files)

    sio = io.StringIO()
    cfg.write(sio)
    new_contents = sio.getvalue().strip() + '\n'
    new_contents = new_contents.replace('\t', '    ')
    new_contents = new_contents.replace(' \n', '\n')

    with open('setup.cfg', 'w') as f:
        f.write(new_contents)

    return 0


def _update() -> int:
    new = []
    for repo in REPOS:
        print(f'{repo.name} ... ', end='', flush=True)

        with tempfile.TemporaryDirectory() as tmpdir:
            git = ('git', '-C', tmpdir)

            url = f'https://github.com/{repo.name}'
            clone_cmd = (*git, 'clone', '--no-checkout', '-q', url, '.')
            subprocess.check_call(clone_cmd)

            branches_cmd = (*git, 'branch', '-r', '--contains', repo.version)
            branches_s = subprocess.check_output(branches_cmd).decode()
            branches = [branch.strip() for branch in branches_s.splitlines()]

            if not branches:
                raise SystemExit(f'orphaned commit {repo.name}')
            elif branches[0].startswith('origin/HEAD -> '):
                _, _, branch = branches[0].rpartition(' ')
            else:
                branch = branches[0]

            version_cmd = (
                *git, 'log', '-1', '--format=%h', branch, '--', *repo.grammars,
            )
            version = subprocess.check_output(version_cmd).decode().strip()

            ancestor_cmd = (
                *git, 'merge-base', '--is-ancestor', version, repo.version,
            )
            if version != repo.version and subprocess.call(ancestor_cmd):
                print(f'{repo.version} => {version}')
                new.append(repo._replace(version=version))
            else:
                print('up to date!')
                new.append(repo)

    new.sort(key=lambda repo: repo.name)

    if new != list(REPOS):
        with open(__file__) as f:
            contents = f.read()

        before, begin, rest = contents.partition('# BEGIN\n')
        _, end, rest = rest.partition('# END\n')

        new_contents = (
            'REPOS = (\n' +
            ''.join(f'{textwrap.indent(repr(r), " " * 4)},\n' for r in new) +
            ')\n'
        )
        new_contents = ''.join(
            line.replace('\n', '  # noqa: E501\n') if len(line) > 80 else line
            for line in new_contents.splitlines(True)
        )

        print('updating source!')
        with open(__file__, 'w') as f:
            for part in (before, begin, new_contents, end, rest):
                f.write(part)

    return 0


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=('download', 'update'))
    args = parser.parse_args()

    if args.command == 'download':
        return _download()
    elif args.command == 'update':
        return _update()
    else:
        raise NotImplementedError(args.command)


if __name__ == '__main__':
    exit(main())
